// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace StoreEmpowerment_Automation
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TestPlatform.UnitTestFramework;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITest.Input;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WindowsRuntimeControls;
    using System.Diagnostics;
    using System.Threading.Tasks;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public partial class UIMap
    {
        public void CheckIncorrectCredentials()
        {
            AutomatedTests.testResults += "\"To verify on invalid username/password : 'Username/Password not verified' should be displayed\" :";
            this.UIStoreEmpowermentWindow.UIUserNameEdit.Text = "vm13";
            this.UIStoreEmpowermentWindow.UIPassWordEdit.Text = "wrongpassword";
            this.UIStoreEmpowermentWindow.UIDomainComboBox.SelectedIndex = 1;
            Gesture.Tap(this.UIStoreEmpowermentWindow.UISigninButton);
            if (!this.UIItemWindow.UIItemWindow1.WaitForControlExist(10000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Message Not Displayed");
            }
            else
            {
                AutomatedTests.testResults += "\"PASS\",";
            }
                        
        }

        public void CheckCorrectCredentials()
        {
            AutomatedTests.testResults += "\"To verify tapping on Sign In button for the first time takes user to the store selection screen\" :";
            this.UIStoreEmpowermentWindow.UIUserNameEdit.Text = "s2001Inform";
            this.UIStoreEmpowermentWindow.UIPassWordEdit.Text = "TescoInform1A";
            this.UIStoreEmpowermentWindow.UIDomainComboBox.SelectedIndex = 1;
            Gesture.Tap(this.UIStoreEmpowermentWindow.UISigninButton);
            if (!this.UIStoreEmpowermentWindow.UISearchTextEdit.WaitForControlExist(20000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Not navigated to select store page");
            }
            else
            {
                AutomatedTests.testResults += "\"PASS\",";
            }
            
        }
        public async void SelectStore()
        {
            AutomatedTests.testResults += "\"To verify that the manager is notified of his store selection by a pop up which is later self dissmissed\" :";
            this.UIStoreEmpowermentWindow.UISearchTextEdit.Text = "Blackpool";
            Gesture.Tap(this.UIStoreEmpowermentWindow.UIStoreListList.UIStoreEmpowermentstorListItem);
            await putDelay();
            if (!this.UIStoreEmpowermentWindow.UIYouhavesuccessfullycText.WaitForControlExist(2000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Message Not Displayed");
            }
            
        }

        async Task putDelay()
        {
            await Task.Delay(2000);
        }

        public void CheckEmptyDomainMessage()
        {
            AutomatedTests.testResults += "\"To verify on first time launch, if '@' is entered, then 'Please choose your domain' should not be displayed\" :";
            this.UIStoreEmpowermentWindow.UIUserNameEdit.Text = "vm13";
            this.UIStoreEmpowermentWindow.UIPassWordEdit.Text = "wrongpassword";
            this.UIStoreEmpowermentWindow.UIDomainComboBox.SelectedIndex = 0;
            Gesture.Tap(this.UIStoreEmpowermentWindow.UISigninButton);
            if (!this.UIItemWindow.UIItemWindow1.WaitForControlExist(10000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Message Not Displayed");
            }
            else
            {
                AutomatedTests.testResults += "\"PASS\",";
            }
        }
        public void CheckEmptyUsernameMessage()
        {
            AutomatedTests.testResults += "\"To verify on invalid username/password : 'Username/Password not verified' should be displayed\" :";
            this.UIStoreEmpowermentWindow.UIPassWordEdit.Text = "wrongpassword";
            this.UIStoreEmpowermentWindow.UIDomainComboBox.SelectedIndex = 1;
            Gesture.Tap(this.UIStoreEmpowermentWindow.UISigninButton);
            if (!this.UIItemWindow.UIItemWindow1.WaitForControlExist(10000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Message Not Displayed");
            }
            else
            {
                AutomatedTests.testResults += "\"PASS\",";
            }

        }
        public void CheckEmptyPasswordMessage()
        {
            AutomatedTests.testResults += "\"To verify on invalid username/password : 'Username/Password not verified' should be displayed\" :";
            this.UIStoreEmpowermentWindow.UIUserNameEdit.Text = "vm13";
            this.UIStoreEmpowermentWindow.UIDomainComboBox.SelectedIndex = 1;
            Gesture.Tap(this.UIStoreEmpowermentWindow.UISigninButton);
            if (!this.UIItemWindow.UIItemWindow1.WaitForControlExist(10000))
            {
                AutomatedTests.testResults += "\"FAIL\",";
                Assert.Fail("Message Not Displayed");
            }
            else
            {
                AutomatedTests.testResults += "\"PASS\",";
            }

        }

        public void DomainHidingTest()
        {
            Debug.WriteLine("inside");
            //AutomatedTests.testResults += "\"To verify on entering '@' in username textbox domain name selection is hidden\" :";
            this.UIStoreEmpowermentWindow.UIUserNameEdit.Text = "vm13Gtescoglobal";
            
            if (!this.UIStoreEmpowermentWindow.UIDomainComboBox.WaitForControlExist(3000))
            {
                
                Assert.Fail("Domain Box Not Hidden");
            }
            

        }

        #region Properties
        public UIStoreEmpowermentWindow UIStoreEmpowermentWindow
        {
            get
            {
                if ((this.mUIStoreEmpowermentWindow == null))
                {
                    this.mUIStoreEmpowermentWindow = new UIStoreEmpowermentWindow();
                }
                return this.mUIStoreEmpowermentWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIStoreEmpowermentWindow mUIStoreEmpowermentWindow;
        
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStoreEmpowermentWindow : XamlWindow
    {
        
        public UIStoreEmpowermentWindow()
        {
            #region Search Criteria
            this.SearchProperties[XamlControl.PropertyNames.Name] = "Availability";
            #endregion
        }
        
        #region Properties
        public XamlControl UIItemImage
        {
            get
            {
                if ((this.mUIItemImage == null))
                {
                    this.mUIItemImage = new XamlControl(this);
                    #region Search Criteria
                    this.mUIItemImage.SearchProperties[UITestControl.PropertyNames.ControlType] = "Image";
                    #endregion
                }
                return this.mUIItemImage;
            }
        }
        
        public XamlButton UIQtrToDateButton
        {
            get
            {
                if ((this.mUIQtrToDateButton == null))
                {
                    this.mUIQtrToDateButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUIQtrToDateButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "qtrToDate";
                    #endregion
                }
                return this.mUIQtrToDateButton;
            }
        }
        
        public XamlButton UILastQtrButton
        {
            get
            {
                if ((this.mUILastQtrButton == null))
                {
                    this.mUILastQtrButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUILastQtrButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "lastQtr";
                    #endregion
                }
                return this.mUILastQtrButton;
            }
        }
        
        public XamlText UIItem100Text
        {
            get
            {
                if ((this.mUIItem100Text == null))
                {
                    this.mUIItem100Text = new XamlText(this);
                    #region Search Criteria
                    this.mUIItem100Text.SearchProperties[XamlText.PropertyNames.AutomationId] = "overallScoreText";
                    #endregion
                }
                return this.mUIItem100Text;
            }
        }
        
        public XamlText UINotApprovedText
        {
            get
            {
                if ((this.mUINotApprovedText == null))
                {
                    this.mUINotApprovedText = new XamlText(this);
                    #region Search Criteria
                    this.mUINotApprovedText.SearchProperties[XamlText.PropertyNames.AutomationId] = "rejectedText";
                    #endregion
                }
                return this.mUINotApprovedText;
            }
        }
        
        public UIListViewList UIListViewList
        {
            get
            {
                if ((this.mUIListViewList == null))
                {
                    this.mUIListViewList = new UIListViewList(this);
                }
                return this.mUIListViewList;
            }
        }
        
        public XamlText UISelectStoreText
        {
            get
            {
                if ((this.mUISelectStoreText == null))
                {
                    this.mUISelectStoreText = new XamlText(this);
                    #region Search Criteria
                    this.mUISelectStoreText.SearchProperties[XamlText.PropertyNames.Name] = "Select Store";
                    #endregion
                }
                return this.mUISelectStoreText;
            }
        }
        
        public XamlText UILogoutText
        {
            get
            {
                if ((this.mUILogoutText == null))
                {
                    this.mUILogoutText = new XamlText(this);
                    #region Search Criteria
                    this.mUILogoutText.SearchProperties[XamlText.PropertyNames.Name] = "Logout";
                    #endregion
                }
                return this.mUILogoutText;
            }
        }
        
        public XamlControl UIItemPane
        {
            get
            {
                if ((this.mUIItemPane == null))
                {
                    this.mUIItemPane = new XamlControl(this);
                    #region Search Criteria
                    this.mUIItemPane.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
                    this.mUIItemPane.SearchProperties[UITestControl.PropertyNames.ClassName] = "ScrollViewer";
                    #endregion
                }
                return this.mUIItemPane;
            }
        }
        
        public XamlEdit UISearchTextEdit
        {
            get
            {
                if ((this.mUISearchTextEdit == null))
                {
                    this.mUISearchTextEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUISearchTextEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "searchText";
                    #endregion
                }
                return this.mUISearchTextEdit;
            }
        }
        
        public UIStoreListList UIStoreListList
        {
            get
            {
                if ((this.mUIStoreListList == null))
                {
                    this.mUIStoreListList = new UIStoreListList(this);
                }
                return this.mUIStoreListList;
            }
        }
        
        public XamlText UIYouhavesuccessfullycText
        {
            get
            {
                if ((this.mUIYouhavesuccessfullycText == null))
                {
                    this.mUIYouhavesuccessfullycText = new XamlText(this);
                    #region Search Criteria
                    this.mUIYouhavesuccessfullycText.SearchProperties[XamlText.PropertyNames.AutomationId] = "message";
                    #endregion
                }
                return this.mUIYouhavesuccessfullycText;
            }
        }
        
        public XamlEdit UIUserNameEdit
        {
            get
            {
                if ((this.mUIUserNameEdit == null))
                {
                    this.mUIUserNameEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIUserNameEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "userName";
                    #endregion
                }
                return this.mUIUserNameEdit;
            }
        }
        
        public XamlEdit UIPassWordEdit
        {
            get
            {
                if ((this.mUIPassWordEdit == null))
                {
                    this.mUIPassWordEdit = new XamlEdit(this);
                    #region Search Criteria
                    this.mUIPassWordEdit.SearchProperties[XamlEdit.PropertyNames.AutomationId] = "passWord";
                    #endregion
                }
                return this.mUIPassWordEdit;
            }
        }
        
        public XamlComboBox UIDomainComboBox
        {
            get
            {
                if ((this.mUIDomainComboBox == null))
                {
                    this.mUIDomainComboBox = new XamlComboBox(this);
                    #region Search Criteria
                    this.mUIDomainComboBox.SearchProperties[XamlComboBox.PropertyNames.AutomationId] = "domain";
                    #endregion
                }
                return this.mUIDomainComboBox;
            }
        }
        
        public XamlButton UISigninButton
        {
            get
            {
                if ((this.mUISigninButton == null))
                {
                    this.mUISigninButton = new XamlButton(this);
                    #region Search Criteria
                    this.mUISigninButton.SearchProperties[XamlButton.PropertyNames.AutomationId] = "signIn";
                    #endregion
                }
                return this.mUISigninButton;
            }
        }
        #endregion
        
        #region Fields
        private XamlControl mUIItemImage;
        
        private XamlButton mUIQtrToDateButton;
        
        private XamlButton mUILastQtrButton;
        
        private XamlText mUIItem100Text;
        
        private XamlText mUINotApprovedText;
        
        private UIListViewList mUIListViewList;
        
        private XamlText mUISelectStoreText;
        
        private XamlText mUILogoutText;
        
        private XamlControl mUIItemPane;
        
        private XamlEdit mUISearchTextEdit;
        
        private UIStoreListList mUIStoreListList;
        
        private XamlText mUIYouhavesuccessfullycText;
        
        private XamlEdit mUIUserNameEdit;
        
        private XamlEdit mUIPassWordEdit;
        
        private XamlComboBox mUIDomainComboBox;
        
        private XamlButton mUISigninButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIListViewList : XamlList
    {
        
        public UIListViewList(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[XamlList.PropertyNames.AutomationId] = "listView";
            #endregion
        }
        
        #region Properties
        public XamlListItem UIStoreEmpowermentListListItem
        {
            get
            {
                if ((this.mUIStoreEmpowermentListListItem == null))
                {
                    this.mUIStoreEmpowermentListListItem = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentListListItem.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.ListViewData";
                    #endregion
                }
                return this.mUIStoreEmpowermentListListItem;
            }
        }
        
        public XamlListItem UIStoreEmpowermentListListItem1
        {
            get
            {
                if ((this.mUIStoreEmpowermentListListItem1 == null))
                {
                    this.mUIStoreEmpowermentListListItem1 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentListListItem1.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.ListViewData";
                    this.mUIStoreEmpowermentListListItem1.SearchProperties[XamlListItem.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIStoreEmpowermentListListItem1;
            }
        }
        
        public XamlListItem UIStoreEmpowermentListListItem2
        {
            get
            {
                if ((this.mUIStoreEmpowermentListListItem2 == null))
                {
                    this.mUIStoreEmpowermentListListItem2 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentListListItem2.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.ListViewData";
                    this.mUIStoreEmpowermentListListItem2.SearchProperties[XamlListItem.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIStoreEmpowermentListListItem2;
            }
        }
        
        public XamlListItem UIStoreEmpowermentListListItem3
        {
            get
            {
                if ((this.mUIStoreEmpowermentListListItem3 == null))
                {
                    this.mUIStoreEmpowermentListListItem3 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentListListItem3.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.ListViewData";
                    this.mUIStoreEmpowermentListListItem3.SearchProperties[XamlListItem.PropertyNames.Instance] = "4";
                    #endregion
                }
                return this.mUIStoreEmpowermentListListItem3;
            }
        }
        
        public XamlListItem UIStoreEmpowermentListListItem4
        {
            get
            {
                if ((this.mUIStoreEmpowermentListListItem4 == null))
                {
                    this.mUIStoreEmpowermentListListItem4 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentListListItem4.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.ListViewData";
                    this.mUIStoreEmpowermentListListItem4.SearchProperties[XamlListItem.PropertyNames.Instance] = "5";
                    #endregion
                }
                return this.mUIStoreEmpowermentListListItem4;
            }
        }
        #endregion
        
        #region Fields
        private XamlListItem mUIStoreEmpowermentListListItem;
        
        private XamlListItem mUIStoreEmpowermentListListItem1;
        
        private XamlListItem mUIStoreEmpowermentListListItem2;
        
        private XamlListItem mUIStoreEmpowermentListListItem3;
        
        private XamlListItem mUIStoreEmpowermentListListItem4;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIStoreListList : XamlList
    {
        
        public UIStoreListList(XamlControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[XamlList.PropertyNames.AutomationId] = "storeList";
            #endregion
        }
        
        #region Properties
        public XamlListItem UIStoreEmpowermentstorListItem
        {
            get
            {
                if ((this.mUIStoreEmpowermentstorListItem == null))
                {
                    this.mUIStoreEmpowermentstorListItem = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentstorListItem.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.storeDetails";
                    #endregion
                }
                return this.mUIStoreEmpowermentstorListItem;
            }
        }
        
        public XamlListItem UIStoreEmpowermentstorListItem1
        {
            get
            {
                if ((this.mUIStoreEmpowermentstorListItem1 == null))
                {
                    this.mUIStoreEmpowermentstorListItem1 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentstorListItem1.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.storeDetails";
                    this.mUIStoreEmpowermentstorListItem1.SearchProperties[XamlListItem.PropertyNames.Instance] = "2";
                    #endregion
                }
                return this.mUIStoreEmpowermentstorListItem1;
            }
        }
        
        public XamlListItem UIStoreEmpowermentstorListItem2
        {
            get
            {
                if ((this.mUIStoreEmpowermentstorListItem2 == null))
                {
                    this.mUIStoreEmpowermentstorListItem2 = new XamlListItem(this);
                    #region Search Criteria
                    this.mUIStoreEmpowermentstorListItem2.SearchProperties[XamlListItem.PropertyNames.Name] = "storeEmpowerment.storeDetails";
                    this.mUIStoreEmpowermentstorListItem2.SearchProperties[XamlListItem.PropertyNames.Instance] = "3";
                    #endregion
                }
                return this.mUIStoreEmpowermentstorListItem2;
            }
        }
        #endregion
        
        #region Fields
        private XamlListItem mUIStoreEmpowermentstorListItem;
        
        private XamlListItem mUIStoreEmpowermentstorListItem1;
        
        private XamlListItem mUIStoreEmpowermentstorListItem2;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow : UITestControl
    {
        
        public UIItemWindow()
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Window";
            this.SearchProperties["FrameworkId"] = "UIX";
            #endregion
        }
        
        #region Properties
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIScrollerPane UIScrollerPane
        {
            get
            {
                if ((this.mUIScrollerPane == null))
                {
                    this.mUIScrollerPane = new UIScrollerPane(this);
                }
                return this.mUIScrollerPane;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow1 mUIItemWindow1;
        
        private UIScrollerPane mUIScrollerPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIItemWindow1 : UITestControl
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties["FrameworkId"] = "UIX";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Window";
            this.SearchProperties["AutomationId"] = "PopupHost";
            #endregion
        }
        
        #region Properties
        public UITestControl UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new UITestControl(this);
                    #region Search Criteria
                    this.mUICloseButton.TechnologyName = "UIA";
                    this.mUICloseButton.SearchProperties["FrameworkId"] = "UIX";
                    this.mUICloseButton.SearchProperties[UITestControl.PropertyNames.ControlType] = "Button";
                    this.mUICloseButton.SearchProperties[UITestControl.PropertyNames.Name] = "close";
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private UITestControl mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.30501.0")]
    public class UIScrollerPane : UITestControl
    {
        
        public UIScrollerPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.TechnologyName = "UIA";
            this.SearchProperties["FrameworkId"] = "UIX";
            this.SearchProperties[UITestControl.PropertyNames.ControlType] = "Pane";
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = null;
            this.SearchProperties["AutomationId"] = "Scroller";
            #endregion
        }
        
        #region Properties
        public UITestControl UINoDatatobeDisplayedText
        {
            get
            {
                if ((this.mUINoDatatobeDisplayedText == null))
                {
                    this.mUINoDatatobeDisplayedText = new UITestControl(this);
                    #region Search Criteria
                    this.mUINoDatatobeDisplayedText.TechnologyName = "UIA";
                    this.mUINoDatatobeDisplayedText.SearchProperties["FrameworkId"] = "UIX";
                    this.mUINoDatatobeDisplayedText.SearchProperties[UITestControl.PropertyNames.ControlType] = "Text";
                    this.mUINoDatatobeDisplayedText.SearchProperties["AutomationId"] = "MessageBoxMessage";
                    #endregion
                }
                return this.mUINoDatatobeDisplayedText;
            }
        }
        #endregion
        
        #region Fields
        private UITestControl mUINoDatatobeDisplayedText;
        #endregion
    }
}
